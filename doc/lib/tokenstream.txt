
================
csx._TokenStream
================

`_TokenStream` iterates over tokens representing CSX structure found within its
`str` argument. The attribute `pos` stores the current line number. ::

    >>> from csx import _TokenStream

    >>> stream = _TokenStream("""
    ...
    ...     /* lists */
    ...
    ...     ol, ul {
    ...         background: orange;
    ...         li { color: maroon; }
    ...     }
    ...
    ...     dd {
    ...         background: yellow;
    ...         dt { color: red }
    ...         dd { color: blue }
    ...     }
    ...
    ... """)

    >>> for token in stream:
    ...     print("line {0:2d}: {1!r}".format(stream.pos, token))
    line  5: 'ol, ul {'
    line  6: 'background: orange'
    line  7: 'li {'
    line  7: 'color: maroon'
    line  7: '}'
    line  8: '}'
    line 10: 'dd {'
    line 11: 'background: yellow'
    line 12: 'dt {'
    line 12: 'color: red'
    line 12: '}'
    line 13: 'dd {'
    line 13: 'color: blue'
    line 13: '}'
    line 14: '}'


Methods
=======

revert()
--------

`revert()` steps back through previous tokens. ::

    >>> stream.revert()
    >>> next(stream)
    '}'

    >>> stream.revert(3)
    >>> next(stream)
    'color: blue'

If a stream is reverted more times than there are previous tokens, the stream
is reset to the beginning. ::

    >>> stream.revert(999)

    >>> next(stream)
    'ol, ul {'

Once the end of the stream has been reached, it can still be reverted. [1]_ :: 

    >>> while True:
    ...     next(stream)
    Traceback (most recent call last):
        ...
    StopIteration

    >>> stream.revert(6)
    >>> for token in stream:
    ...     print("line {0:2d}: {1!r}".format(stream.pos, token))
    line 12: 'color: red'
    line 12: '}'
    line 13: 'dd {'
    line 13: 'color: blue'
    line 13: '}'
    line 14: '}'


.. [1]  This is a violation of the `iterator protocol`_, which suggests to the
        author that the iterator protocol is broken.

.. _iterator protocol: http://www.python.org/dev/peps/pep-0234

